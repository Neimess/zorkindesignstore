name: zorkin_backend_ci
description: CI for zorkin backend

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'

env:
  GO_VERSION: '1.24'
  MODULE_PATH: ./backend

jobs:
  lint:
    name: Lint & Static Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ${{ env.MODULE_PATH }}

      - name: Run golangci-lint
        working-directory: ${{ env.MODULE_PATH }}
        run: golangci-lint run ./...

      - name: Check gofmt
        working-directory: ${{ env.MODULE_PATH }}
        run: |
          UNFORMATTED=$(gofmt -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "Found unformatted files:"
            echo "$UNFORMATTED"
            exit 1
          fi

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        working-directory: ${{ env.MODULE_PATH }}
        run: staticcheck ./...

  test:
    name: Unit Tests & Vet
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules & build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ 
              hashFiles('${{ env.MODULE_PATH }}/go.sum','${{ env.MODULE_PATH }}/go.mod') 
            }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        working-directory: ${{ env.MODULE_PATH }}
        run: go mod download

      - name: Check Docker connectivity
        run: docker ps

      - name: Vet code
        working-directory: ${{ env.MODULE_PATH }}
        run: go vet ./...

      - name: Run tests with race detector
        working-directory: ${{ env.MODULE_PATH }}
        run: |
          set -o pipefail
          go test -v -race -count=1 ./... | grep -v '\[no test files\]'
