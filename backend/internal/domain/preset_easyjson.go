// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain(in *jlexer.Lexer, out *PresetItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "preset_id":
			out.PresetID = int64(in.Int64())
		case "product_id":
			out.ProductID = int64(in.Int64())
		case "quantity":
			out.Quantity = float64(in.Float64())
		case "unit":
			out.Unit = string(in.String())
		case "note":
			out.Note = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain(out *jwriter.Writer, in PresetItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"preset_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.PresetID))
	}
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProductID))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Float64(float64(in.Quantity))
	}
	if in.Unit != "" {
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	if in.Note != "" {
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		out.String(string(in.Note))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PresetItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresetItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PresetItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresetItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain(l, v)
}
func easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain1(in *jlexer.Lexer, out *Preset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "total_price":
			out.TotalPrice = float64(in.Float64())
		case "image_url":
			out.ImageURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain1(out *jwriter.Writer, in Preset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalPrice))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Preset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Preset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson626eba69EncodeGithubComNeimessZorkinStoreProjectInternalDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Preset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Preset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson626eba69DecodeGithubComNeimessZorkinStoreProjectInternalDomain1(l, v)
}
