// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain(in *jlexer.Lexer, out *ProductAttribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_id":
			out.ProductID = int64(in.Int64())
		case "attribute_id":
			out.AttributeID = int64(in.Int64())
		case "value_string":
			if in.IsNull() {
				in.Skip()
				out.ValueString = nil
			} else {
				if out.ValueString == nil {
					out.ValueString = new(string)
				}
				*out.ValueString = string(in.String())
			}
		case "value_int":
			if in.IsNull() {
				in.Skip()
				out.ValueInt = nil
			} else {
				if out.ValueInt == nil {
					out.ValueInt = new(int64)
				}
				*out.ValueInt = int64(in.Int64())
			}
		case "value_float":
			if in.IsNull() {
				in.Skip()
				out.ValueFloat = nil
			} else {
				if out.ValueFloat == nil {
					out.ValueFloat = new(float64)
				}
				*out.ValueFloat = float64(in.Float64())
			}
		case "value_bool":
			if in.IsNull() {
				in.Skip()
				out.ValueBool = nil
			} else {
				if out.ValueBool == nil {
					out.ValueBool = new(bool)
				}
				*out.ValueBool = bool(in.Bool())
			}
		case "value_enum":
			if in.IsNull() {
				in.Skip()
				out.ValueEnum = nil
			} else {
				if out.ValueEnum == nil {
					out.ValueEnum = new(string)
				}
				*out.ValueEnum = string(in.String())
			}
		case "attribute":
			(out.Attribute).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain(out *jwriter.Writer, in ProductAttribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ProductID))
	}
	{
		const prefix string = ",\"attribute_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.AttributeID))
	}
	if in.ValueString != nil {
		const prefix string = ",\"value_string\":"
		out.RawString(prefix)
		out.String(string(*in.ValueString))
	}
	if in.ValueInt != nil {
		const prefix string = ",\"value_int\":"
		out.RawString(prefix)
		out.Int64(int64(*in.ValueInt))
	}
	if in.ValueFloat != nil {
		const prefix string = ",\"value_float\":"
		out.RawString(prefix)
		out.Float64(float64(*in.ValueFloat))
	}
	if in.ValueBool != nil {
		const prefix string = ",\"value_bool\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ValueBool))
	}
	if in.ValueEnum != nil {
		const prefix string = ",\"value_enum\":"
		out.RawString(prefix)
		out.String(string(*in.ValueEnum))
	}
	{
		const prefix string = ",\"attribute\":"
		out.RawString(prefix)
		(in.Attribute).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductAttribute) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductAttribute) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductAttribute) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductAttribute) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain(l, v)
}
func easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain1(in *jlexer.Lexer, out *Product) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "description":
			out.Description = string(in.String())
		case "category_id":
			out.CategoryID = int64(in.Int64())
		case "image_url":
			out.ImageURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]ProductAttribute, 0, 0)
					} else {
						out.Attributes = []ProductAttribute{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ProductAttribute
					(v1).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain1(out *jwriter.Writer, in Product) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.CategoryID))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Attributes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Product) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Product) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Product) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Product) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain1(l, v)
}
func easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain2(in *jlexer.Lexer, out *PresetProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PresetID":
			out.PresetID = int64(in.Int64())
		case "ProductID":
			out.ProductID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain2(out *jwriter.Writer, in PresetProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"PresetID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.PresetID))
	}
	{
		const prefix string = ",\"ProductID\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProductID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PresetProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresetProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCf3f67efEncodeGithubComNeimessZorkinStoreProjectInternalDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PresetProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresetProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCf3f67efDecodeGithubComNeimessZorkinStoreProjectInternalDomain2(l, v)
}
