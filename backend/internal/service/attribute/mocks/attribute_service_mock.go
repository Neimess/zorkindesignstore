// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/attribute"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAttributeRepository creates a new instance of MockAttributeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttributeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttributeRepository {
	mock := &MockAttributeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAttributeRepository is an autogenerated mock type for the AttributeRepository type
type MockAttributeRepository struct {
	mock.Mock
}

type MockAttributeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttributeRepository) EXPECT() *MockAttributeRepository_Expecter {
	return &MockAttributeRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAttributeRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAttributeRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAttributeRepository_Delete_Call {
	return &MockAttributeRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAttributeRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockAttributeRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_Delete_Call) Return(err error) *MockAttributeRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockAttributeRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByCategory provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) FindByCategory(ctx context.Context, categoryID int64) ([]attr.Attribute, error) {
	ret := _mock.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 []attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]attr.Attribute, error)); ok {
		return returnFunc(ctx, categoryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []attr.Attribute); ok {
		r0 = returnFunc(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeRepository_FindByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCategory'
type MockAttributeRepository_FindByCategory_Call struct {
	*mock.Call
}

// FindByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryID int64
func (_e *MockAttributeRepository_Expecter) FindByCategory(ctx interface{}, categoryID interface{}) *MockAttributeRepository_FindByCategory_Call {
	return &MockAttributeRepository_FindByCategory_Call{Call: _e.mock.On("FindByCategory", ctx, categoryID)}
}

func (_c *MockAttributeRepository_FindByCategory_Call) Run(run func(ctx context.Context, categoryID int64)) *MockAttributeRepository_FindByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_FindByCategory_Call) Return(attributes []attr.Attribute, err error) *MockAttributeRepository_FindByCategory_Call {
	_c.Call.Return(attributes, err)
	return _c
}

func (_c *MockAttributeRepository_FindByCategory_Call) RunAndReturn(run func(ctx context.Context, categoryID int64) ([]attr.Attribute, error)) *MockAttributeRepository_FindByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) GetByID(ctx context.Context, id int64) (*attr.Attribute, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*attr.Attribute, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *attr.Attribute); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAttributeRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAttributeRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockAttributeRepository_GetByID_Call {
	return &MockAttributeRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAttributeRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockAttributeRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_GetByID_Call) Return(attribute *attr.Attribute, err error) *MockAttributeRepository_GetByID_Call {
	_c.Call.Return(attribute, err)
	return _c
}

func (_c *MockAttributeRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*attr.Attribute, error)) *MockAttributeRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) Save(ctx context.Context, attr1 *attr.Attribute) error {
	ret := _mock.Called(ctx, attr1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *attr.Attribute) error); ok {
		r0 = returnFunc(ctx, attr1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAttributeRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - attr1 *attr.Attribute
func (_e *MockAttributeRepository_Expecter) Save(ctx interface{}, attr1 interface{}) *MockAttributeRepository_Save_Call {
	return &MockAttributeRepository_Save_Call{Call: _e.mock.On("Save", ctx, attr1)}
}

func (_c *MockAttributeRepository_Save_Call) Run(run func(ctx context.Context, attr1 *attr.Attribute)) *MockAttributeRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *attr.Attribute
		if args[1] != nil {
			arg1 = args[1].(*attr.Attribute)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_Save_Call) Return(err error) *MockAttributeRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeRepository_Save_Call) RunAndReturn(run func(ctx context.Context, attr1 *attr.Attribute) error) *MockAttributeRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBatch provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) SaveBatch(ctx context.Context, attrs []attr.Attribute) error {
	ret := _mock.Called(ctx, attrs)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []attr.Attribute) error); ok {
		r0 = returnFunc(ctx, attrs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeRepository_SaveBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBatch'
type MockAttributeRepository_SaveBatch_Call struct {
	*mock.Call
}

// SaveBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - attrs []attr.Attribute
func (_e *MockAttributeRepository_Expecter) SaveBatch(ctx interface{}, attrs interface{}) *MockAttributeRepository_SaveBatch_Call {
	return &MockAttributeRepository_SaveBatch_Call{Call: _e.mock.On("SaveBatch", ctx, attrs)}
}

func (_c *MockAttributeRepository_SaveBatch_Call) Run(run func(ctx context.Context, attrs []attr.Attribute)) *MockAttributeRepository_SaveBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []attr.Attribute
		if args[1] != nil {
			arg1 = args[1].([]attr.Attribute)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_SaveBatch_Call) Return(err error) *MockAttributeRepository_SaveBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeRepository_SaveBatch_Call) RunAndReturn(run func(ctx context.Context, attrs []attr.Attribute) error) *MockAttributeRepository_SaveBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAttributeRepository
func (_mock *MockAttributeRepository) Update(ctx context.Context, attr1 *attr.Attribute) (*attr.Attribute, error) {
	ret := _mock.Called(ctx, attr1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *attr.Attribute) (*attr.Attribute, error)); ok {
		return returnFunc(ctx, attr1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *attr.Attribute) *attr.Attribute); ok {
		r0 = returnFunc(ctx, attr1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *attr.Attribute) error); ok {
		r1 = returnFunc(ctx, attr1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAttributeRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - attr1 *attr.Attribute
func (_e *MockAttributeRepository_Expecter) Update(ctx interface{}, attr1 interface{}) *MockAttributeRepository_Update_Call {
	return &MockAttributeRepository_Update_Call{Call: _e.mock.On("Update", ctx, attr1)}
}

func (_c *MockAttributeRepository_Update_Call) Run(run func(ctx context.Context, attr1 *attr.Attribute)) *MockAttributeRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *attr.Attribute
		if args[1] != nil {
			arg1 = args[1].(*attr.Attribute)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeRepository_Update_Call) Return(attribute *attr.Attribute, err error) *MockAttributeRepository_Update_Call {
	_c.Call.Return(attribute, err)
	return _c
}

func (_c *MockAttributeRepository_Update_Call) RunAndReturn(run func(ctx context.Context, attr1 *attr.Attribute) (*attr.Attribute, error)) *MockAttributeRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
