// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/category"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Create(ctx context.Context, cat *category.Category) (*category.Category, error) {
	ret := _mock.Called(ctx, cat)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *category.Category) (*category.Category, error)); ok {
		return returnFunc(ctx, cat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *category.Category) *category.Category); ok {
		r0 = returnFunc(ctx, cat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *category.Category) error); ok {
		r1 = returnFunc(ctx, cat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCategoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - cat *category.Category
func (_e *MockCategoryRepository_Expecter) Create(ctx interface{}, cat interface{}) *MockCategoryRepository_Create_Call {
	return &MockCategoryRepository_Create_Call{Call: _e.mock.On("Create", ctx, cat)}
}

func (_c *MockCategoryRepository_Create_Call) Run(run func(ctx context.Context, cat *category.Category)) *MockCategoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *category.Category
		if args[1] != nil {
			arg1 = args[1].(*category.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Create_Call) Return(category1 *category.Category, err error) *MockCategoryRepository_Create_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *MockCategoryRepository_Create_Call) RunAndReturn(run func(ctx context.Context, cat *category.Category) (*category.Category, error)) *MockCategoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCategoryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockCategoryRepository_Delete_Call {
	return &MockCategoryRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockCategoryRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Delete_Call) Return(err error) *MockCategoryRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockCategoryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) GetByID(ctx context.Context, id int64) (*category.Category, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*category.Category, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *category.Category); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCategoryRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockCategoryRepository_GetByID_Call {
	return &MockCategoryRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockCategoryRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_GetByID_Call) Return(category1 *category.Category, err error) *MockCategoryRepository_GetByID_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *MockCategoryRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*category.Category, error)) *MockCategoryRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) List(ctx context.Context) ([]category.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]category.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []category.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCategoryRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryRepository_Expecter) List(ctx interface{}) *MockCategoryRepository_List_Call {
	return &MockCategoryRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockCategoryRepository_List_Call) Run(run func(ctx context.Context)) *MockCategoryRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_List_Call) Return(categorys []category.Category, err error) *MockCategoryRepository_List_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoryRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]category.Category, error)) *MockCategoryRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockCategoryRepository
func (_mock *MockCategoryRepository) Update(ctx context.Context, id int64, newName string) (*category.Category, error) {
	ret := _mock.Called(ctx, id, newName)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (*category.Category, error)); ok {
		return returnFunc(ctx, id, newName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) *category.Category); ok {
		r0 = returnFunc(ctx, id, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, id, newName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCategoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - newName string
func (_e *MockCategoryRepository_Expecter) Update(ctx interface{}, id interface{}, newName interface{}) *MockCategoryRepository_Update_Call {
	return &MockCategoryRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, newName)}
}

func (_c *MockCategoryRepository_Update_Call) Run(run func(ctx context.Context, id int64, newName string)) *MockCategoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCategoryRepository_Update_Call) Return(category1 *category.Category, err error) *MockCategoryRepository_Update_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *MockCategoryRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id int64, newName string) (*category.Category, error)) *MockCategoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
