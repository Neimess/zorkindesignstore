// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryRepository creates a new instance of MockCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepository {
	mock := &MockCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryRepository is an autogenerated mock type for the CategoryRepository type
type MockCategoryRepository struct {
	mock.Mock
}

type MockCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepository) EXPECT() *MockCategoryRepository_Expecter {
	return &MockCategoryRepository_Expecter{mock: &_m.Mock}
}

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(ctx context.Context, p *domain.Product) (int64, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (int64, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) int64); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - p *domain.Product
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, p interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, p)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, p *domain.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Product
		if args[1] != nil {
			arg1 = args[1].(*domain.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(n int64, err error) *MockProductRepository_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(ctx context.Context, p *domain.Product) (int64, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithAttrs provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) CreateWithAttrs(ctx context.Context, p *domain.Product) (int64, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithAttrs")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (int64, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) int64); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_CreateWithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithAttrs'
type MockProductRepository_CreateWithAttrs_Call struct {
	*mock.Call
}

// CreateWithAttrs is a helper method to define mock.On call
//   - ctx context.Context
//   - p *domain.Product
func (_e *MockProductRepository_Expecter) CreateWithAttrs(ctx interface{}, p interface{}) *MockProductRepository_CreateWithAttrs_Call {
	return &MockProductRepository_CreateWithAttrs_Call{Call: _e.mock.On("CreateWithAttrs", ctx, p)}
}

func (_c *MockProductRepository_CreateWithAttrs_Call) Run(run func(ctx context.Context, p *domain.Product)) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Product
		if args[1] != nil {
			arg1 = args[1].(*domain.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_CreateWithAttrs_Call) Return(n int64, err error) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockProductRepository_CreateWithAttrs_Call) RunAndReturn(run func(ctx context.Context, p *domain.Product) (int64, error)) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithAttrs provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) GetWithAttrs(ctx context.Context, id int64) (*domain.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithAttrs")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*domain.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *domain.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_GetWithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithAttrs'
type MockProductRepository_GetWithAttrs_Call struct {
	*mock.Call
}

// GetWithAttrs is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductRepository_Expecter) GetWithAttrs(ctx interface{}, id interface{}) *MockProductRepository_GetWithAttrs_Call {
	return &MockProductRepository_GetWithAttrs_Call{Call: _e.mock.On("GetWithAttrs", ctx, id)}
}

func (_c *MockProductRepository_GetWithAttrs_Call) Run(run func(ctx context.Context, id int64)) *MockProductRepository_GetWithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_GetWithAttrs_Call) Return(product *domain.Product, err error) *MockProductRepository_GetWithAttrs_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepository_GetWithAttrs_Call) RunAndReturn(run func(ctx context.Context, id int64) (*domain.Product, error)) *MockProductRepository_GetWithAttrs_Call {
	_c.Call.Return(run)
	return _c
}
