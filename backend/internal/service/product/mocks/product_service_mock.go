// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/product"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(ctx context.Context, p *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - p *product.Product
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, p interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, p)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, p *product.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(product1 *product.Product, err error) *MockProductRepository_Create_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(ctx context.Context, p *product.Product) (*product.Product, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithAttrs provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) CreateWithAttrs(ctx context.Context, p *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithAttrs")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_CreateWithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithAttrs'
type MockProductRepository_CreateWithAttrs_Call struct {
	*mock.Call
}

// CreateWithAttrs is a helper method to define mock.On call
//   - ctx context.Context
//   - p *product.Product
func (_e *MockProductRepository_Expecter) CreateWithAttrs(ctx interface{}, p interface{}) *MockProductRepository_CreateWithAttrs_Call {
	return &MockProductRepository_CreateWithAttrs_Call{Call: _e.mock.On("CreateWithAttrs", ctx, p)}
}

func (_c *MockProductRepository_CreateWithAttrs_Call) Run(run func(ctx context.Context, p *product.Product)) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_CreateWithAttrs_Call) Return(product1 *product.Product, err error) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepository_CreateWithAttrs_Call) RunAndReturn(run func(ctx context.Context, p *product.Product) (*product.Product, error)) *MockProductRepository_CreateWithAttrs_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockProductRepository_Delete_Call {
	return &MockProductRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProductRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockProductRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_Delete_Call) Return(err error) *MockProductRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockProductRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Get(ctx context.Context, id int64) (*product.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*product.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *product.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProductRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductRepository_Expecter) Get(ctx interface{}, id interface{}) *MockProductRepository_Get_Call {
	return &MockProductRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockProductRepository_Get_Call) Run(run func(ctx context.Context, id int64)) *MockProductRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_Get_Call) Return(product1 *product.Product, err error) *MockProductRepository_Get_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id int64) (*product.Product, error)) *MockProductRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListByCategory provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) ListByCategory(ctx context.Context, catID int64) ([]product.Product, error) {
	ret := _mock.Called(ctx, catID)

	if len(ret) == 0 {
		panic("no return value specified for ListByCategory")
	}

	var r0 []product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]product.Product, error)); ok {
		return returnFunc(ctx, catID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []product.Product); ok {
		r0 = returnFunc(ctx, catID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, catID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_ListByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByCategory'
type MockProductRepository_ListByCategory_Call struct {
	*mock.Call
}

// ListByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - catID int64
func (_e *MockProductRepository_Expecter) ListByCategory(ctx interface{}, catID interface{}) *MockProductRepository_ListByCategory_Call {
	return &MockProductRepository_ListByCategory_Call{Call: _e.mock.On("ListByCategory", ctx, catID)}
}

func (_c *MockProductRepository_ListByCategory_Call) Run(run func(ctx context.Context, catID int64)) *MockProductRepository_ListByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_ListByCategory_Call) Return(products []product.Product, err error) *MockProductRepository_ListByCategory_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductRepository_ListByCategory_Call) RunAndReturn(run func(ctx context.Context, catID int64) ([]product.Product, error)) *MockProductRepository_ListByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithAttrs provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) UpdateWithAttrs(ctx context.Context, p *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithAttrs")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_UpdateWithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithAttrs'
type MockProductRepository_UpdateWithAttrs_Call struct {
	*mock.Call
}

// UpdateWithAttrs is a helper method to define mock.On call
//   - ctx context.Context
//   - p *product.Product
func (_e *MockProductRepository_Expecter) UpdateWithAttrs(ctx interface{}, p interface{}) *MockProductRepository_UpdateWithAttrs_Call {
	return &MockProductRepository_UpdateWithAttrs_Call{Call: _e.mock.On("UpdateWithAttrs", ctx, p)}
}

func (_c *MockProductRepository_UpdateWithAttrs_Call) Run(run func(ctx context.Context, p *product.Product)) *MockProductRepository_UpdateWithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepository_UpdateWithAttrs_Call) Return(product1 *product.Product, err error) *MockProductRepository_UpdateWithAttrs_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepository_UpdateWithAttrs_Call) RunAndReturn(run func(ctx context.Context, p *product.Product) (*product.Product, error)) *MockProductRepository_UpdateWithAttrs_Call {
	_c.Call.Return(run)
	return _c
}
