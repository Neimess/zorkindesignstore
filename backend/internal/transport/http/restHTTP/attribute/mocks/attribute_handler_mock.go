// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/attribute"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAttributeService creates a new instance of MockAttributeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttributeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttributeService {
	mock := &MockAttributeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAttributeService is an autogenerated mock type for the AttributeService type
type MockAttributeService struct {
	mock.Mock
}

type MockAttributeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttributeService) EXPECT() *MockAttributeService_Expecter {
	return &MockAttributeService_Expecter{mock: &_m.Mock}
}

// CreateAttribute provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) CreateAttribute(ctx context.Context, category_id int64, in *attr.Attribute) (*attr.Attribute, error) {
	ret := _mock.Called(ctx, category_id, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttribute")
	}

	var r0 *attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *attr.Attribute) (*attr.Attribute, error)); ok {
		return returnFunc(ctx, category_id, in)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *attr.Attribute) *attr.Attribute); ok {
		r0 = returnFunc(ctx, category_id, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *attr.Attribute) error); ok {
		r1 = returnFunc(ctx, category_id, in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeService_CreateAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttribute'
type MockAttributeService_CreateAttribute_Call struct {
	*mock.Call
}

// CreateAttribute is a helper method to define mock.On call
//   - ctx context.Context
//   - category_id int64
//   - in *attr.Attribute
func (_e *MockAttributeService_Expecter) CreateAttribute(ctx interface{}, category_id interface{}, in interface{}) *MockAttributeService_CreateAttribute_Call {
	return &MockAttributeService_CreateAttribute_Call{Call: _e.mock.On("CreateAttribute", ctx, category_id, in)}
}

func (_c *MockAttributeService_CreateAttribute_Call) Run(run func(ctx context.Context, category_id int64, in *attr.Attribute)) *MockAttributeService_CreateAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *attr.Attribute
		if args[2] != nil {
			arg2 = args[2].(*attr.Attribute)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAttributeService_CreateAttribute_Call) Return(attribute *attr.Attribute, err error) *MockAttributeService_CreateAttribute_Call {
	_c.Call.Return(attribute, err)
	return _c
}

func (_c *MockAttributeService_CreateAttribute_Call) RunAndReturn(run func(ctx context.Context, category_id int64, in *attr.Attribute) (*attr.Attribute, error)) *MockAttributeService_CreateAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAttributesBatch provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) CreateAttributesBatch(ctx context.Context, category_id int64, input []attr.Attribute) error {
	ret := _mock.Called(ctx, category_id, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttributesBatch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, []attr.Attribute) error); ok {
		r0 = returnFunc(ctx, category_id, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeService_CreateAttributesBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAttributesBatch'
type MockAttributeService_CreateAttributesBatch_Call struct {
	*mock.Call
}

// CreateAttributesBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - category_id int64
//   - input []attr.Attribute
func (_e *MockAttributeService_Expecter) CreateAttributesBatch(ctx interface{}, category_id interface{}, input interface{}) *MockAttributeService_CreateAttributesBatch_Call {
	return &MockAttributeService_CreateAttributesBatch_Call{Call: _e.mock.On("CreateAttributesBatch", ctx, category_id, input)}
}

func (_c *MockAttributeService_CreateAttributesBatch_Call) Run(run func(ctx context.Context, category_id int64, input []attr.Attribute)) *MockAttributeService_CreateAttributesBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 []attr.Attribute
		if args[2] != nil {
			arg2 = args[2].([]attr.Attribute)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAttributeService_CreateAttributesBatch_Call) Return(err error) *MockAttributeService_CreateAttributesBatch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeService_CreateAttributesBatch_Call) RunAndReturn(run func(ctx context.Context, category_id int64, input []attr.Attribute) error) *MockAttributeService_CreateAttributesBatch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAttribute provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) DeleteAttribute(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttribute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeService_DeleteAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAttribute'
type MockAttributeService_DeleteAttribute_Call struct {
	*mock.Call
}

// DeleteAttribute is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAttributeService_Expecter) DeleteAttribute(ctx interface{}, id interface{}) *MockAttributeService_DeleteAttribute_Call {
	return &MockAttributeService_DeleteAttribute_Call{Call: _e.mock.On("DeleteAttribute", ctx, id)}
}

func (_c *MockAttributeService_DeleteAttribute_Call) Run(run func(ctx context.Context, id int64)) *MockAttributeService_DeleteAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeService_DeleteAttribute_Call) Return(err error) *MockAttributeService_DeleteAttribute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeService_DeleteAttribute_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockAttributeService_DeleteAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttribute provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) GetAttribute(ctx context.Context, categoryID int64, id int64) (*attr.Attribute, error) {
	ret := _mock.Called(ctx, categoryID, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAttribute")
	}

	var r0 *attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) (*attr.Attribute, error)); ok {
		return returnFunc(ctx, categoryID, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) *attr.Attribute); ok {
		r0 = returnFunc(ctx, categoryID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = returnFunc(ctx, categoryID, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeService_GetAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttribute'
type MockAttributeService_GetAttribute_Call struct {
	*mock.Call
}

// GetAttribute is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryID int64
//   - id int64
func (_e *MockAttributeService_Expecter) GetAttribute(ctx interface{}, categoryID interface{}, id interface{}) *MockAttributeService_GetAttribute_Call {
	return &MockAttributeService_GetAttribute_Call{Call: _e.mock.On("GetAttribute", ctx, categoryID, id)}
}

func (_c *MockAttributeService_GetAttribute_Call) Run(run func(ctx context.Context, categoryID int64, id int64)) *MockAttributeService_GetAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAttributeService_GetAttribute_Call) Return(attribute *attr.Attribute, err error) *MockAttributeService_GetAttribute_Call {
	_c.Call.Return(attribute, err)
	return _c
}

func (_c *MockAttributeService_GetAttribute_Call) RunAndReturn(run func(ctx context.Context, categoryID int64, id int64) (*attr.Attribute, error)) *MockAttributeService_GetAttribute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttributes provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) ListAttributes(ctx context.Context, categoryID int64) ([]attr.Attribute, error) {
	ret := _mock.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for ListAttributes")
	}

	var r0 []attr.Attribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]attr.Attribute, error)); ok {
		return returnFunc(ctx, categoryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []attr.Attribute); ok {
		r0 = returnFunc(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attr.Attribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAttributeService_ListAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttributes'
type MockAttributeService_ListAttributes_Call struct {
	*mock.Call
}

// ListAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryID int64
func (_e *MockAttributeService_Expecter) ListAttributes(ctx interface{}, categoryID interface{}) *MockAttributeService_ListAttributes_Call {
	return &MockAttributeService_ListAttributes_Call{Call: _e.mock.On("ListAttributes", ctx, categoryID)}
}

func (_c *MockAttributeService_ListAttributes_Call) Run(run func(ctx context.Context, categoryID int64)) *MockAttributeService_ListAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeService_ListAttributes_Call) Return(attributes []attr.Attribute, err error) *MockAttributeService_ListAttributes_Call {
	_c.Call.Return(attributes, err)
	return _c
}

func (_c *MockAttributeService_ListAttributes_Call) RunAndReturn(run func(ctx context.Context, categoryID int64) ([]attr.Attribute, error)) *MockAttributeService_ListAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAttribute provides a mock function for the type MockAttributeService
func (_mock *MockAttributeService) UpdateAttribute(ctx context.Context, attr1 *attr.Attribute) error {
	ret := _mock.Called(ctx, attr1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttribute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *attr.Attribute) error); ok {
		r0 = returnFunc(ctx, attr1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAttributeService_UpdateAttribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAttribute'
type MockAttributeService_UpdateAttribute_Call struct {
	*mock.Call
}

// UpdateAttribute is a helper method to define mock.On call
//   - ctx context.Context
//   - attr1 *attr.Attribute
func (_e *MockAttributeService_Expecter) UpdateAttribute(ctx interface{}, attr1 interface{}) *MockAttributeService_UpdateAttribute_Call {
	return &MockAttributeService_UpdateAttribute_Call{Call: _e.mock.On("UpdateAttribute", ctx, attr1)}
}

func (_c *MockAttributeService_UpdateAttribute_Call) Run(run func(ctx context.Context, attr1 *attr.Attribute)) *MockAttributeService_UpdateAttribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *attr.Attribute
		if args[1] != nil {
			arg1 = args[1].(*attr.Attribute)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAttributeService_UpdateAttribute_Call) Return(err error) *MockAttributeService_UpdateAttribute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAttributeService_UpdateAttribute_Call) RunAndReturn(run func(ctx context.Context, attr1 *attr.Attribute) error) *MockAttributeService_UpdateAttribute_Call {
	_c.Call.Return(run)
	return _c
}
