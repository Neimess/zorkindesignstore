// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package category

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(in *jlexer.Lexer, out *CreateCategoryReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]AttributePayload, 0, 1)
					} else {
						out.Attributes = []AttributePayload{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AttributePayload
					(v1).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(out *jwriter.Writer, in CreateCategoryReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		if in.Attributes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Attributes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCategoryReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCategoryReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCategoryReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCategoryReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory(l, v)
}
func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(in *jlexer.Lexer, out *CategoryUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(out *jwriter.Writer, in CategoryUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory1(l, v)
}
func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(in *jlexer.Lexer, out *CategoryResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]CategoryResponse, 0, 1)
					} else {
						out.Categories = []CategoryResponse{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CategoryResponse
					(v4).UnmarshalEasyJSON(in)
					out.Categories = append(out.Categories, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(out *jwriter.Writer, in CategoryResponseList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix[1:])
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Categories {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory2(l, v)
}
func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(in *jlexer.Lexer, out *CategoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]AttributePayload, 0, 1)
					} else {
						out.Attributes = []AttributePayload{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 AttributePayload
					(v7).UnmarshalEasyJSON(in)
					out.Attributes = append(out.Attributes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(out *jwriter.Writer, in CategoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Attributes {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory3(l, v)
}
func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(in *jlexer.Lexer, out *CategoryCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(out *jwriter.Writer, in CategoryCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryCreateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryCreateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory4(l, v)
}
func easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(in *jlexer.Lexer, out *AttributePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		case "is_filterable":
			out.IsFilterable = bool(in.Bool())
		case "is_required":
			out.IsRequired = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(out *jwriter.Writer, in AttributePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"is_filterable\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFilterable))
	}
	{
		const prefix string = ",\"is_required\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRequired))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttributePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttributePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttributePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttributePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComNeimessZorkinStoreProjectInternalTransportHttpRestHTTPCategory5(l, v)
}
