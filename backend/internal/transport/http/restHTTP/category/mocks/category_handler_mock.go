// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/category"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCategoryService creates a new instance of MockCategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryService {
	mock := &MockCategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCategoryService is an autogenerated mock type for the CategoryService type
type MockCategoryService struct {
	mock.Mock
}

type MockCategoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryService) EXPECT() *MockCategoryService_Expecter {
	return &MockCategoryService_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function for the type MockCategoryService
func (_mock *MockCategoryService) CreateCategory(ctx context.Context, cat *category.Category) (*category.Category, error) {
	ret := _mock.Called(ctx, cat)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *category.Category) (*category.Category, error)); ok {
		return returnFunc(ctx, cat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *category.Category) *category.Category); ok {
		r0 = returnFunc(ctx, cat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *category.Category) error); ok {
		r1 = returnFunc(ctx, cat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryService_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type MockCategoryService_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - cat *category.Category
func (_e *MockCategoryService_Expecter) CreateCategory(ctx interface{}, cat interface{}) *MockCategoryService_CreateCategory_Call {
	return &MockCategoryService_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, cat)}
}

func (_c *MockCategoryService_CreateCategory_Call) Run(run func(ctx context.Context, cat *category.Category)) *MockCategoryService_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *category.Category
		if args[1] != nil {
			arg1 = args[1].(*category.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryService_CreateCategory_Call) Return(category1 *category.Category, err error) *MockCategoryService_CreateCategory_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *MockCategoryService_CreateCategory_Call) RunAndReturn(run func(ctx context.Context, cat *category.Category) (*category.Category, error)) *MockCategoryService_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function for the type MockCategoryService
func (_mock *MockCategoryService) DeleteCategory(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryService_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type MockCategoryService_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryService_Expecter) DeleteCategory(ctx interface{}, id interface{}) *MockCategoryService_DeleteCategory_Call {
	return &MockCategoryService_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, id)}
}

func (_c *MockCategoryService_DeleteCategory_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryService_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryService_DeleteCategory_Call) Return(err error) *MockCategoryService_DeleteCategory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryService_DeleteCategory_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockCategoryService_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function for the type MockCategoryService
func (_mock *MockCategoryService) GetCategory(ctx context.Context, id int64) (*category.Category, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 *category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*category.Category, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *category.Category); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryService_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type MockCategoryService_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockCategoryService_Expecter) GetCategory(ctx interface{}, id interface{}) *MockCategoryService_GetCategory_Call {
	return &MockCategoryService_GetCategory_Call{Call: _e.mock.On("GetCategory", ctx, id)}
}

func (_c *MockCategoryService_GetCategory_Call) Run(run func(ctx context.Context, id int64)) *MockCategoryService_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryService_GetCategory_Call) Return(category1 *category.Category, err error) *MockCategoryService_GetCategory_Call {
	_c.Call.Return(category1, err)
	return _c
}

func (_c *MockCategoryService_GetCategory_Call) RunAndReturn(run func(ctx context.Context, id int64) (*category.Category, error)) *MockCategoryService_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function for the type MockCategoryService
func (_mock *MockCategoryService) ListCategories(ctx context.Context) ([]category.Category, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []category.Category
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]category.Category, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []category.Category); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCategoryService_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type MockCategoryService_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCategoryService_Expecter) ListCategories(ctx interface{}) *MockCategoryService_ListCategories_Call {
	return &MockCategoryService_ListCategories_Call{Call: _e.mock.On("ListCategories", ctx)}
}

func (_c *MockCategoryService_ListCategories_Call) Run(run func(ctx context.Context)) *MockCategoryService_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCategoryService_ListCategories_Call) Return(categorys []category.Category, err error) *MockCategoryService_ListCategories_Call {
	_c.Call.Return(categorys, err)
	return _c
}

func (_c *MockCategoryService_ListCategories_Call) RunAndReturn(run func(ctx context.Context) ([]category.Category, error)) *MockCategoryService_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function for the type MockCategoryService
func (_mock *MockCategoryService) UpdateCategory(ctx context.Context, cat *category.Category) error {
	ret := _mock.Called(ctx, cat)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *category.Category) error); ok {
		r0 = returnFunc(ctx, cat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCategoryService_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type MockCategoryService_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - cat *category.Category
func (_e *MockCategoryService_Expecter) UpdateCategory(ctx interface{}, cat interface{}) *MockCategoryService_UpdateCategory_Call {
	return &MockCategoryService_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, cat)}
}

func (_c *MockCategoryService_UpdateCategory_Call) Run(run func(ctx context.Context, cat *category.Category)) *MockCategoryService_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *category.Category
		if args[1] != nil {
			arg1 = args[1].(*category.Category)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCategoryService_UpdateCategory_Call) Return(err error) *MockCategoryService_UpdateCategory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCategoryService_UpdateCategory_Call) RunAndReturn(run func(ctx context.Context, cat *category.Category) error) *MockCategoryService_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}
