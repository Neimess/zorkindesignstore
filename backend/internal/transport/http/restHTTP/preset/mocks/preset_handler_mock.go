// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/preset"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPresetService creates a new instance of MockPresetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPresetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPresetService {
	mock := &MockPresetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPresetService is an autogenerated mock type for the PresetService type
type MockPresetService struct {
	mock.Mock
}

type MockPresetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPresetService) EXPECT() *MockPresetService_Expecter {
	return &MockPresetService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPresetService
func (_mock *MockPresetService) Create(ctx context.Context, p *preset.Preset) (*preset.Preset, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *preset.Preset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *preset.Preset) (*preset.Preset, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *preset.Preset) *preset.Preset); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*preset.Preset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *preset.Preset) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPresetService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPresetService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - p *preset.Preset
func (_e *MockPresetService_Expecter) Create(ctx interface{}, p interface{}) *MockPresetService_Create_Call {
	return &MockPresetService_Create_Call{Call: _e.mock.On("Create", ctx, p)}
}

func (_c *MockPresetService_Create_Call) Run(run func(ctx context.Context, p *preset.Preset)) *MockPresetService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *preset.Preset
		if args[1] != nil {
			arg1 = args[1].(*preset.Preset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPresetService_Create_Call) Return(preset1 *preset.Preset, err error) *MockPresetService_Create_Call {
	_c.Call.Return(preset1, err)
	return _c
}

func (_c *MockPresetService_Create_Call) RunAndReturn(run func(ctx context.Context, p *preset.Preset) (*preset.Preset, error)) *MockPresetService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockPresetService
func (_mock *MockPresetService) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPresetService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPresetService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPresetService_Expecter) Delete(ctx interface{}, id interface{}) *MockPresetService_Delete_Call {
	return &MockPresetService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockPresetService_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockPresetService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPresetService_Delete_Call) Return(err error) *MockPresetService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPresetService_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockPresetService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockPresetService
func (_mock *MockPresetService) Get(ctx context.Context, id int64) (*preset.Preset, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *preset.Preset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*preset.Preset, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *preset.Preset); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*preset.Preset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPresetService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPresetService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPresetService_Expecter) Get(ctx interface{}, id interface{}) *MockPresetService_Get_Call {
	return &MockPresetService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockPresetService_Get_Call) Run(run func(ctx context.Context, id int64)) *MockPresetService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPresetService_Get_Call) Return(preset1 *preset.Preset, err error) *MockPresetService_Get_Call {
	_c.Call.Return(preset1, err)
	return _c
}

func (_c *MockPresetService_Get_Call) RunAndReturn(run func(ctx context.Context, id int64) (*preset.Preset, error)) *MockPresetService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// ListDetailed provides a mock function for the type MockPresetService
func (_mock *MockPresetService) ListDetailed(ctx context.Context) ([]preset.Preset, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDetailed")
	}

	var r0 []preset.Preset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]preset.Preset, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []preset.Preset); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]preset.Preset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPresetService_ListDetailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDetailed'
type MockPresetService_ListDetailed_Call struct {
	*mock.Call
}

// ListDetailed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPresetService_Expecter) ListDetailed(ctx interface{}) *MockPresetService_ListDetailed_Call {
	return &MockPresetService_ListDetailed_Call{Call: _e.mock.On("ListDetailed", ctx)}
}

func (_c *MockPresetService_ListDetailed_Call) Run(run func(ctx context.Context)) *MockPresetService_ListDetailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPresetService_ListDetailed_Call) Return(presets []preset.Preset, err error) *MockPresetService_ListDetailed_Call {
	_c.Call.Return(presets, err)
	return _c
}

func (_c *MockPresetService_ListDetailed_Call) RunAndReturn(run func(ctx context.Context) ([]preset.Preset, error)) *MockPresetService_ListDetailed_Call {
	_c.Call.Return(run)
	return _c
}

// ListShort provides a mock function for the type MockPresetService
func (_mock *MockPresetService) ListShort(ctx context.Context) ([]preset.Preset, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListShort")
	}

	var r0 []preset.Preset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]preset.Preset, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []preset.Preset); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]preset.Preset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPresetService_ListShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListShort'
type MockPresetService_ListShort_Call struct {
	*mock.Call
}

// ListShort is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPresetService_Expecter) ListShort(ctx interface{}) *MockPresetService_ListShort_Call {
	return &MockPresetService_ListShort_Call{Call: _e.mock.On("ListShort", ctx)}
}

func (_c *MockPresetService_ListShort_Call) Run(run func(ctx context.Context)) *MockPresetService_ListShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPresetService_ListShort_Call) Return(presets []preset.Preset, err error) *MockPresetService_ListShort_Call {
	_c.Call.Return(presets, err)
	return _c
}

func (_c *MockPresetService_ListShort_Call) RunAndReturn(run func(ctx context.Context) ([]preset.Preset, error)) *MockPresetService_ListShort_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockPresetService
func (_mock *MockPresetService) Update(ctx context.Context, p *preset.Preset) (*preset.Preset, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *preset.Preset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *preset.Preset) (*preset.Preset, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *preset.Preset) *preset.Preset); ok {
		r0 = returnFunc(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*preset.Preset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *preset.Preset) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPresetService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPresetService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - p *preset.Preset
func (_e *MockPresetService_Expecter) Update(ctx interface{}, p interface{}) *MockPresetService_Update_Call {
	return &MockPresetService_Update_Call{Call: _e.mock.On("Update", ctx, p)}
}

func (_c *MockPresetService_Update_Call) Run(run func(ctx context.Context, p *preset.Preset)) *MockPresetService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *preset.Preset
		if args[1] != nil {
			arg1 = args[1].(*preset.Preset)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPresetService_Update_Call) Return(preset1 *preset.Preset, err error) *MockPresetService_Update_Call {
	_c.Call.Return(preset1, err)
	return _c
}

func (_c *MockPresetService_Update_Call) RunAndReturn(run func(ctx context.Context, p *preset.Preset) (*preset.Preset, error)) *MockPresetService_Update_Call {
	_c.Call.Return(run)
	return _c
}
