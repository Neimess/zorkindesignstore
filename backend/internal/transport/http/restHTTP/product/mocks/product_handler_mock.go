// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Neimess/zorkin-store-project/internal/domain/product"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductService
func (_mock *MockProductService) Create(ctx context.Context, product1 *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, product1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, product1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, product1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, product1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - product1 *product.Product
func (_e *MockProductService_Expecter) Create(ctx interface{}, product1 interface{}) *MockProductService_Create_Call {
	return &MockProductService_Create_Call{Call: _e.mock.On("Create", ctx, product1)}
}

func (_c *MockProductService_Create_Call) Run(run func(ctx context.Context, product1 *product.Product)) *MockProductService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_Create_Call) Return(product11 *product.Product, err error) *MockProductService_Create_Call {
	_c.Call.Return(product11, err)
	return _c
}

func (_c *MockProductService_Create_Call) RunAndReturn(run func(ctx context.Context, product1 *product.Product) (*product.Product, error)) *MockProductService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithAttrs provides a mock function for the type MockProductService
func (_mock *MockProductService) CreateWithAttrs(ctx context.Context, product1 *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, product1)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithAttrs")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, product1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, product1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, product1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_CreateWithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithAttrs'
type MockProductService_CreateWithAttrs_Call struct {
	*mock.Call
}

// CreateWithAttrs is a helper method to define mock.On call
//   - ctx context.Context
//   - product1 *product.Product
func (_e *MockProductService_Expecter) CreateWithAttrs(ctx interface{}, product1 interface{}) *MockProductService_CreateWithAttrs_Call {
	return &MockProductService_CreateWithAttrs_Call{Call: _e.mock.On("CreateWithAttrs", ctx, product1)}
}

func (_c *MockProductService_CreateWithAttrs_Call) Run(run func(ctx context.Context, product1 *product.Product)) *MockProductService_CreateWithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_CreateWithAttrs_Call) Return(product11 *product.Product, err error) *MockProductService_CreateWithAttrs_Call {
	_c.Call.Return(product11, err)
	return _c
}

func (_c *MockProductService_CreateWithAttrs_Call) RunAndReturn(run func(ctx context.Context, product1 *product.Product) (*product.Product, error)) *MockProductService_CreateWithAttrs_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProductService
func (_mock *MockProductService) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductService_Expecter) Delete(ctx interface{}, id interface{}) *MockProductService_Delete_Call {
	return &MockProductService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockProductService_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_Delete_Call) Return(err error) *MockProductService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockProductService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCategoryID provides a mock function for the type MockProductService
func (_mock *MockProductService) GetByCategoryID(ctx context.Context, categoryID int64) ([]product.Product, error) {
	ret := _mock.Called(ctx, categoryID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCategoryID")
	}

	var r0 []product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]product.Product, error)); ok {
		return returnFunc(ctx, categoryID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []product.Product); ok {
		r0 = returnFunc(ctx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, categoryID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetByCategoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCategoryID'
type MockProductService_GetByCategoryID_Call struct {
	*mock.Call
}

// GetByCategoryID is a helper method to define mock.On call
//   - ctx context.Context
//   - categoryID int64
func (_e *MockProductService_Expecter) GetByCategoryID(ctx interface{}, categoryID interface{}) *MockProductService_GetByCategoryID_Call {
	return &MockProductService_GetByCategoryID_Call{Call: _e.mock.On("GetByCategoryID", ctx, categoryID)}
}

func (_c *MockProductService_GetByCategoryID_Call) Run(run func(ctx context.Context, categoryID int64)) *MockProductService_GetByCategoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_GetByCategoryID_Call) Return(products []product.Product, err error) *MockProductService_GetByCategoryID_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductService_GetByCategoryID_Call) RunAndReturn(run func(ctx context.Context, categoryID int64) ([]product.Product, error)) *MockProductService_GetByCategoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetailed provides a mock function for the type MockProductService
func (_mock *MockProductService) GetDetailed(ctx context.Context, id int64) (*product.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailed")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*product.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *product.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetDetailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailed'
type MockProductService_GetDetailed_Call struct {
	*mock.Call
}

// GetDetailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockProductService_Expecter) GetDetailed(ctx interface{}, id interface{}) *MockProductService_GetDetailed_Call {
	return &MockProductService_GetDetailed_Call{Call: _e.mock.On("GetDetailed", ctx, id)}
}

func (_c *MockProductService_GetDetailed_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_GetDetailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_GetDetailed_Call) Return(product1 *product.Product, err error) *MockProductService_GetDetailed_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductService_GetDetailed_Call) RunAndReturn(run func(ctx context.Context, id int64) (*product.Product, error)) *MockProductService_GetDetailed_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProductService
func (_mock *MockProductService) Update(ctx context.Context, product1 *product.Product) (*product.Product, error) {
	ret := _mock.Called(ctx, product1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *product.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) (*product.Product, error)); ok {
		return returnFunc(ctx, product1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *product.Product) *product.Product); ok {
		r0 = returnFunc(ctx, product1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *product.Product) error); ok {
		r1 = returnFunc(ctx, product1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProductService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - product1 *product.Product
func (_e *MockProductService_Expecter) Update(ctx interface{}, product1 interface{}) *MockProductService_Update_Call {
	return &MockProductService_Update_Call{Call: _e.mock.On("Update", ctx, product1)}
}

func (_c *MockProductService_Update_Call) Run(run func(ctx context.Context, product1 *product.Product)) *MockProductService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *product.Product
		if args[1] != nil {
			arg1 = args[1].(*product.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductService_Update_Call) Return(product11 *product.Product, err error) *MockProductService_Update_Call {
	_c.Call.Return(product11, err)
	return _c
}

func (_c *MockProductService_Update_Call) RunAndReturn(run func(ctx context.Context, product1 *product.Product) (*product.Product, error)) *MockProductService_Update_Call {
	_c.Call.Return(run)
	return _c
}
