import React, { useState } from 'react';
import { categoryAPI } from '../../services/api';

function CategoryManager({
  categories,
  setCategories,
  getAdminToken,
  showMessage,
  styles,
  onViewCategoryProducts,
}) {
  console.log('–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);  // ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞
  const [catName, setCatName] = useState('');
  const [catType, setCatType] = useState('room');

  const [roomType, setRoomType] = useState(''); // ¬´–°–ø–∞–ª—å–Ω—è¬ª, ¬´–í–∞–Ω–Ω–∞—è¬ª ‚Ä¶
  const [parentRoom, setParentRoom] = useState('');
  const [parentElement, setParentElement] = useState('');
  const { inputStyle, buttonStyle, deleteButtonStyle } = styles;
const [isSubmitting, setIsSubmitting] = useState(false);
  

const addCategory = async () => {
  console.log('üîî addCategory –≤—ã–∑–≤–∞–Ω');
  console.log('–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
  console.log('–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', catType);
  console.log('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞:', parentRoom);
  console.log('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç:', parentElement);

  if (!catName.trim()) {
    showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true);
    return;
  }

  const token = await getAdminToken();
  if (!token) return;

  const parent_id =
    catType === 'room'
      ? null
      : catType === 'element'
        ? Number(parentRoom)
        : Number(parentElement);

  if ((catType === 'element' && !parentRoom) || (catType === 'sub' && !parentElement)) {
    showMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', true);
    return;
  }

  const payload = {
    name: catName.trim(),
    parent_id,
    description: catType === 'room' ? roomType.trim() : undefined,
  };

  console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', payload);

  try {
      setIsSubmitting(true);
    const created = await categoryAPI.create(payload, token);
    console.log('–°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', created);
    setCategories((prev) => {
      const newCategories = [...prev, created];
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', newCategories);
      return newCategories;
    });
    showMessage('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');

    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setCatName('');
    setRoomType('');
    setCatType('room');
    setParentRoom('');
    setParentElement('');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', e);
    showMessage(e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true);
  } finally {
    setIsSubmitting(false);
  }
};


  const removeCategory = async (id) => {
    console.log('–£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å id:', id);
    try {
      const token = await getAdminToken();
      if (!token) return;
      await categoryAPI.delete(id, token);
      setCategories(categories.filter((c) => c.id !== id));
      showMessage('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      showMessage(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const createTestCategories = async () => {
    const token = await getAdminToken();
    if (!token) return;

    try {
      setIsSubmitting(true);
      showMessage('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
      const room1 = await categoryAPI.create({ name: '–ì–æ—Å—Ç–∏–Ω–∞—è', parent_id: null, description: '–ì–æ—Å—Ç–∏–Ω–∞—è' }, token);
      const room2 = await categoryAPI.create({ name: '–°–ø–∞–ª—å–Ω—è', parent_id: null, description: '–°–ø–∞–ª—å–Ω—è' }, token);
      
      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç
      const element1 = await categoryAPI.create({ name: '–î–∏–≤–∞–Ω', parent_id: room1.id }, token);
      const element2 = await categoryAPI.create({ name: '–°—Ç–æ–ª', parent_id: room1.id }, token);
      const element3 = await categoryAPI.create({ name: '–ö—Ä–æ–≤–∞—Ç—å', parent_id: room2.id }, token);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      await categoryAPI.create({ name: '–£–≥–ª–æ–≤–æ–π –¥–∏–≤–∞–Ω', parent_id: element1.id }, token);
      await categoryAPI.create({ name: '–ü—Ä—è–º–æ–π –¥–∏–≤–∞–Ω', parent_id: element1.id }, token);
      await categoryAPI.create({ name: '–û–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª', parent_id: element2.id }, token);
      await categoryAPI.create({ name: '–î–≤—É—Å–ø–∞–ª—å–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å', parent_id: element3.id }, token);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const updatedCategories = await categoryAPI.getAll();
      setCategories(updatedCategories);

      showMessage('–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', e);
      showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', true);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="AdminSection">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2
          style={{
            fontSize: '1.5rem',
            color: '#f8fafc',
            position: 'relative',
            paddingBottom: '10px',
          }}
        >
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
          <span
            style={{
              position: 'absolute',
              bottom: 0,
              left: 0,
              width: '60px',
              height: '3px',
              background: 'linear-gradient(90deg, #3b82f6, #60a5fa)',
              borderRadius: '2px',
            }}
          ></span>
        </h2>
        
        <button
          onClick={createTestCategories}
          disabled={isSubmitting}
          style={{
            background: 'linear-gradient(135deg, #10b981, #059669)',
            color: '#fff',
            border: 'none',
            borderRadius: '8px',
            padding: '8px 16px',
            fontSize: '0.9rem',
            fontWeight: 600,
            cursor: isSubmitting ? 'not-allowed' : 'pointer',
            transition: 'all 0.3s ease',
            boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)',
            opacity: isSubmitting ? 0.7 : 1,
          }}
        >
          {isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
        </button>
      </div>

      <div
        style={{
          display: 'flex',
          gap: 12,
          marginBottom: 24,
          alignItems: 'center',
          flexWrap: 'wrap'
        }}
      >
        <select
          value={catType}
          onChange={(e) => {
            setCatType(e.target.value);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞
            setParentRoom('');
            setParentElement('');
          }}
          style={{ ...inputStyle, minWidth: '200px' }}
        >
          <option value="room">üè† –ö–æ–º–Ω–∞—Ç–∞</option>
          <option value="element">üì¶ –≠–ª–µ–º–µ–Ω—Ç (–≤–Ω—É—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—ã)</option>
          <option value="sub">üîπ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (–≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞)</option>
        </select>

        {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        {(catType === 'element' || catType === 'sub') && (
          <div style={{ position: 'relative', width: '100%', marginTop: '10px' }}>
            <select
              value={parentRoom}
              onChange={(e) => setParentRoom(e.target.value)}
              style={{
                ...inputStyle,
                borderColor: !categories.filter(c => c.parent_id === null).length ? '#ef4444' : inputStyle.borderColor
              }}
            >
              <option value="">‚Äî –í—ã–±–µ—Ä–∏ –∫–æ–º–Ω–∞—Ç—É ‚Äî</option>
              {categories
  .filter((c) => !('parent_id' in c) || c.parent_id === null || c.parent_id === 0)
  .map((room) => (
    <option key={room.id} value={room.id}>
      {room.name}
    </option>
  ))}

              {!categories.filter(c => c.parent_id === null).length && (
                <option value="" disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</option>
              )}
            </select>
            {!categories.filter(c => c.parent_id === null).length && (
              <div style={{ 
                color: '#ef4444', 
                fontSize: '12px', 
                marginTop: '4px',
                position: 'absolute',
                bottom: '-20px',
                left: '0'
              }}>
                –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—ã
              </div>
            )}
          </div>
        )}

        {catType === 'sub' && parentRoom && (
          <div style={{ position: 'relative', width: '100%', marginTop: '10px' }}>
            <select
              value={parentElement}
              onChange={(e) => setParentElement(e.target.value)}
              style={{
                ...inputStyle,
                borderColor: !categories.filter(c => c.parent_id === Number(parentRoom)).length ? '#ef4444' : inputStyle.borderColor
              }}
            >
              <option value="">‚Äî –í—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî</option>
              {categories
                .filter((c) => c.parent_id === Number(parentRoom))
                .map((elem) => (
                  <option key={elem.id} value={elem.id}>
                    {elem.name}
                  </option>
                ))}
              {!categories.filter(c => c.parent_id === Number(parentRoom)).length && (
                <option value="" disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</option>
              )}
            </select>
            {!categories.filter(c => c.parent_id === Number(parentRoom)).length && (
              <div style={{ 
                color: '#ef4444', 
                fontSize: '12px', 
                marginTop: '4px',
                position: 'absolute',
                bottom: '-20px',
                left: '0'
              }}>
                –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
              </div>
            )}
          </div>
        )}

        {catType === 'room' && (
          <input
            value={roomType}
            onChange={(e) => setRoomType(e.target.value)}
            placeholder="–¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ì–æ—Å—Ç–∏–Ω–∞—è)"
            style={inputStyle}
          />
        )}

        <input
          value={catName}
          onChange={(e) => setCatName(e.target.value)}
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
          style={inputStyle}
        />

        <button onClick={addCategory} style={buttonStyle}>
          –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </div>

      <ul
        style={{
          marginBottom: 30,
          listStyle: 'none',
          padding: 0,
          background: 'rgba(30, 41, 59, 0.5)',
          borderRadius: '12px',
          overflow: 'hidden',
          border: '1px solid #334155',
        }}
      >
        {categories.map((c) => (
          <li
            key={c.id}
            style={{
              padding: '14px 20px',
              borderBottom: '1px solid rgba(51, 65, 85, 0.5)',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              transition: 'all 0.3s ease',
            }}
          >
            <span style={{ fontSize: '1.1rem', fontWeight: 500 }}>
              {c.name}
            </span>
            <div style={{ display: 'flex', gap: 8 }}>
              <button
                onClick={() => onViewCategoryProducts(c.id)}
                style={{
                  ...buttonStyle,
                  backgroundColor: '#0ea5e9',
                  borderColor: '#0284c7',
                }}
              >
                –¢–æ–≤–∞—Ä—ã
              </button>
              <button
                onClick={() => removeCategory(c.id)}
                style={deleteButtonStyle}
              >
                <i
                  className="fas fa-trash-alt"
                  style={{ marginRight: '6px' }}
                ></i>
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default CategoryManager;
