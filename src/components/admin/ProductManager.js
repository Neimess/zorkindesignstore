import React, { useState, useEffect } from 'react';
import { productAPI, categoryAttributeAPI, serviceAPI } from '../../services/api';

/* ------------------------------------------------------------
 * Helpers
 * ----------------------------------------------------------*/

const getProductId = (p) => p?.product_id ?? p?.id ?? null;

const parseAttributes = (input) => {
  if (!input.trim()) return [];

  return input.split(';').map((item) => {
    const [namePart, valuePart] = item.split(':');

    return {
      name: namePart ? namePart.trim() : '',
      unit: '', // –ò–ª–∏ –¥–æ–±–∞–≤–ª—è–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      value: valuePart ? valuePart.trim() : '',
    };
  });
};
    

const stringifyAttributes = (arr = []) =>
  arr
    .map((a) => {
      // –µ—Å–ª–∏ —Å –±—ç–∫–∞ –ø—Ä–∏—à–ª–æ –∏–º—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ fallback –Ω–∞ id
      const label = a.name || a.attribute_name || a.attribute_id;
      return `${label}:${a.value}`;
    })
    .join('; ');


/* ============================================================
 * ProductManager
 * ==========================================================*/

function ProductManager({
  categories,
  products,
  setProducts,
  getAdminToken,
  showMessage,
  styles,
}) {
  const [roomId, setRoomId] = useState('');
  const [elementId, setElementId] = useState('');
  const [subId, setSubId] = useState('');

  const [availableServices, setAvailableServices] = useState([]);

useEffect(() => {
  const fetchServices = async () => {
    try {
      const token = await getAdminToken();
      if (!token) return;
      const data = await serviceAPI.getAll(token); // <-- –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
      setAvailableServices(data || []);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', err);
    }
  };
  fetchServices();
}, []);

const [allowedAttrs, setAllowedAttrs] = useState([]);

useEffect(() => {
  if (!subId) return;
  (async () => {
    try {
      const arr = await categoryAttributeAPI.getAll(subId);
      setAllowedAttrs(arr);      // [{id, name, unit}, ...]
    } catch (e) {
      console.error('–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', e);
    }
  })();
}, [subId]);

  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log('ProductManager - –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categories - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  const rooms = Array.isArray(categories) ? categories.filter(c => c.parent_id == null) : [];
  console.log('ProductManager - –ö–æ–º–Ω–∞—Ç—ã:', rooms);

  const elements = Array.isArray(categories) ? categories.filter(
    c => roomId && c.parent_id === Number(roomId)
  ) : [];
  console.log('ProductManager - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã', roomId, ':', elements);

  const subs = Array.isArray(categories) ? categories.filter(
    c => elementId && c.parent_id === Number(elementId)
  ) : [];
  console.log('ProductManager - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞', elementId, ':', subs);

/* --------------------- local state ---------------------- */
  const [form, setForm] = useState({
  name: '',
  price: '',
  description: '',
  image_url: '',
  categoryId: categories[0]?.id ?? 1,
  attributes: '',      // –ø–æ–∫–∞ —Å—Ç—Ä–æ–∫–æ–π
  services: [],        // <-- –º–∞—Å—Å–∏–≤
});

  const [editingId, setEditingId] = useState(null);

  const resetForm = () => {
    setForm({
      name: '',
      price: '',
      description: '',
      image_url: '',
      categoryId: categories[0]?.id ?? 1,
      attributes: '',
      services: [],
    });
    setEditingId(null);
    setRoomId('');
    setElementId('');
    setSubId('');
  };

  const { inputStyle, buttonStyle, deleteButtonStyle } = styles;
  const editBtnStyle = {
    ...deleteButtonStyle,
    background: 'rgba(34,197,94,.1)',
    color: '#4ade80',
  };
 

const saveProduct = async () => {
  if (!form.name.trim() || !form.price) return;

  try {
    const token = await getAdminToken();
    if (!token) return;

    if (!subId) {
      showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', true);
      return;
    }

  
    // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    // üîª –≤–Ω—É—Ç—Ä–∏ saveProduct (–∏–ª–∏ –≥–¥–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å payload)
const preparedAttributes = Array.isArray(form.attributes)
  ? form.attributes
  : parseAttributes(form.attributes);   // ‚Üê —Ç–≤–æ–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ "–¶–≤–µ—Ç: –±–µ–ª—ã–π"

  const isUpdate = Boolean(editingId);
const attributesForApi = preparedAttributes.map((a) => {
  if (isUpdate) {
    // –í update unit –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    return {
      name: a.name?.trim() || '',
      unit: (a.unit ?? '').trim(),
      value: a.value?.toString().trim() || '',
    };
  } else {
    // –í create unit –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π
    const attr = {
      name: a.name?.trim() || '',
      value: a.value?.toString().trim() || '',
    };

    if (a.unit && a.unit.trim().length > 0) {
      attr.unit = a.unit.trim();
    }

    return attr;
  }
});







    // –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ª—É–≥
    const preparedServices = Array.isArray(form.services)
  ? form.services.map((id) => ({ service_id: Number(id) }))
  : [];


console.log('ATTR', preparedAttributes);
  console.log('SERV', preparedServices);






   const payload = {
  name        : form.name.trim(),
  price       : Number(form.price),
  description : form.description.trim(),
  image_url   : form.image_url.trim(),
  category_id : Number(subId),
  attributes  : attributesForApi,           // ‚Üê —É–∂–µ –±–µ–∑ –ø—É—Å—Ç–æ–≥–æ unit
  services    : preparedServices            // –∫–∞–∫ —Ä–∞–Ω—å—à–µ
};


 console.log("–ß–ï–ù–ö–ù–ò –∑–∞–ø—Ä–æ—Å", payload)

  /* ‚îÄ‚îÄ‚îÄ –≤—ã–∑–æ–≤ API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  const hasExtras = payload.attributes.length || payload.services.length;
  // console.log('payload:', payload);

    if (editingId) {
  const updated = await productAPI.update(editingId, payload, token);

  setProducts(prev =>
    prev.map(p =>
      getProductId(p) === editingId
        ? { ...updated, categoryId: updated.category_id }
        : p
    )
  );

  showMessage('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω');
}
else {
      // -------- CREATE ----------
     const created = await productAPI.create(payload, token);

      if (!created?.product_id && !created?.id) {
      showMessage('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª ID', true);
      return;
    }

      const productId = created.product_id || created.id;
      setProducts((prev) => [
      ...prev,
      { ...created, product_id: productId, categoryId: created.category_id },
    ]);

    showMessage('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
   resetForm();
    setRoomId('');
    setElementId('');
    setSubId('');  
  }


  } catch (err) {
    console.error('saveProduct', err);
    showMessage(err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', true);
  }
};

  /* --------------------- DELETE --------------------------- */
  const removeProduct = async (prod) => {
    const id = getProductId(prod);
    if (!id) return showMessage('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID', true);

    try {
      const token = await getAdminToken();
      if (!token) return;

      await productAPI.delete(id, token);
      setProducts((prev) => prev.filter((p) => getProductId(p) !== id));
      if (editingId === id) {
        resetForm();
        setRoomId('');
        setElementId('');
        setSubId('');
      }
      showMessage('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω');
    } catch (err) {
      console.error('removeProduct', err);
      showMessage(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', true);
    }
  };

  /* ---------------------- render -------------------------- */
  return (
    <div className="AdminSection" style={{ marginTop: 40 }}>
      <h2 style={{ fontSize: '1.5rem', color: '#f8fafc', marginBottom: 20 }}>
        –¢–æ–≤–∞—Ä—ã
        <span
          style={{
            display: 'block',
            width: 60,
            height: 3,
            marginTop: 4,
            background: 'linear-gradient(90deg,#3b82f6,#60a5fa)',
            borderRadius: 2,
          }}
        />
      </h2>

      {/* ------------------ form ------------------ */}
      <div
        style={{
          display: 'grid',
          gridTemplateColumns: '1fr 1fr',
          gap: 16,
          marginBottom: 24,
          background: 'rgba(30,41,59,0.5)',
          padding: 20,
          borderRadius: 12,
          border: '1px solid #334155',
        }}
      >
        <input
          value={form.name}
          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
          onChange={(e) => setForm({ ...form, name: e.target.value })}
          style={inputStyle}
        />
        <input
          type="number"
          value={form.price}
          placeholder="–¶–µ–Ω–∞"
          onChange={(e) => setForm({ ...form, price: e.target.value })}
          style={inputStyle}
        />
        {/* -- –ö–æ–º–Ω–∞—Ç–∞ -- */}
        <div style={{ position: 'relative', width: '100%' }}>
          <select
            value={roomId}
            onChange={(e) => {
              setRoomId(e.target.value);
              setElementId('');
              setSubId('');
            }}
            style={{
              ...inputStyle,
              borderColor: !rooms || rooms.length === 0 ? '#ef4444' : inputStyle.borderColor
            }}
          >
            <option value="">‚Äî –ö–æ–º–Ω–∞—Ç–∞ ‚Äî</option>
            {rooms && rooms.length > 0 ? (
              rooms.map((r) => (
                <option key={r.id} value={r.id}>
                  {r.name}
                </option>
              ))
            ) : (
              <option value="" disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç</option>
            )}
          </select>
          {(!rooms || rooms.length === 0) && (
            <div style={{ 
              color: '#ef4444', 
              fontSize: '12px', 
              marginTop: '4px',
              position: 'absolute',
              bottom: '-20px',
              left: '0'
            }}>
              –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
            </div>
          )}
        </div>

        {/* ‚Äî –≠–ª–µ–º–µ–Ω—Ç ‚Äî */}
        <div style={{ position: 'relative', width: '100%' }}>
          <select
            value={elementId}
            onChange={e => {
              setElementId(e.target.value);
              setSubId('');
            }}
            disabled={!roomId}
            style={{
              ...inputStyle,
              opacity: !roomId ? 0.7 : 1,
              borderColor: roomId && (!elements || elements.length === 0) ? '#ef4444' : inputStyle.borderColor
            }}
          >
            <option value="">‚Äî –≠–ª–µ–º–µ–Ω—Ç ‚Äî</option>
            {elements && elements.length > 0 ? (
              elements.map(el => (
                <option key={el.id} value={el.id}>
                  {el.name}
                </option>
              ))
            ) : (
              <option value="" disabled>{roomId ? '–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É'}</option>
            )}
          </select>
          {roomId && (!elements || elements.length === 0) && (
            <div style={{ 
              color: '#ef4444', 
              fontSize: '12px', 
              marginTop: '4px',
              position: 'absolute',
              bottom: '-20px',
              left: '0'
            }}>
              –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
            </div>
          )}
        </div>

        {/* -- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è -- */}
        <div style={{ position: 'relative', width: '100%' }}>
          <select
            value={subId}
            onChange={(e) => setSubId(e.target.value)}
            disabled={!elementId}
            style={{
              ...inputStyle,
              opacity: !elementId ? 0.7 : 1,
              borderColor: elementId && (!subs || subs.length === 0) ? '#ef4444' : inputStyle.borderColor
            }}
          >
            <option value="">‚Äî –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî</option>
            {subs && subs.length > 0 ? (
              subs.map((s) => (
                <option key={s.id} value={s.id}>
                  {s.name}
                </option>
              ))
            ) : (
              <option value="" disabled>{elementId ? '–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç'}</option>
            )}
          </select>
          {elementId && (!subs || subs.length === 0) && (
            <div style={{ 
              color: '#ef4444', 
              fontSize: '12px', 
              marginTop: '4px',
              position: 'absolute',
              bottom: '-20px',
              left: '0'
            }}>
              –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            </div>
          )}
        </div>

        <input
          value={form.image_url}
          placeholder="URL –∫–∞—Ä—Ç–∏–Ω–∫–∏"
          onChange={(e) => setForm({ ...form, image_url: e.target.value })}
          style={inputStyle}
        />
        <input
          value={form.description}
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
          onChange={(e) => setForm({ ...form, description: e.target.value })}
          style={inputStyle}
        />
        <input
          value={form.attributes}
          placeholder="–ê—Ç—Ä–∏–±—É—Ç—ã: 2:1.25; 3:–ú–∞—Ç–æ–≤—ã–π"
          onChange={(e) => setForm({ ...form, attributes: e.target.value })}
          style={inputStyle}
        />
        <select
  multiple
  value={form.services}
  onChange={(e) => {
    const selected = Array.from(e.target.selectedOptions).map((opt) => opt.value);
    setForm({ ...form, services: selected });
  }}
  style={inputStyle}
>
  {availableServices.map((s) => (
    <option key={s.id} value={s.id}>
      {s.name} ({s.price} ‚ÇΩ)
    </option>
  ))}
</select>


        <button
          onClick={saveProduct}
          style={{
            ...buttonStyle,
            gridColumn: '1/-1',
            marginTop: 10,
            padding: 14,
          }}
        >
          {editingId ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å'}
        </button>
      </div>

      {/* ------------------ list ------------------ */}
      <ul
        style={{
          listStyle: 'none',
          padding: 0,
          margin: 0,
          background: 'rgba(30,41,59,0.5)',
          borderRadius: 12,
          border: '1px solid #334155',
          maxHeight: 400,
          overflowY: 'auto',
        }}
      >
        {products.length === 0 && (
          <li style={{ padding: 20, textAlign: 'center', color: '#94a3b8' }}>
            –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç
          </li>
        )}

        {products.map((p) => {
          const id = getProductId(p);
          const isEditing = editingId === id;
          return (
            <li
              key={id ?? `${p.name}_${p.price}`}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: 16,
                padding: '14px 20px',
                borderBottom: '1px solid rgba(51,65,85,0.5)',
                borderLeft: isEditing ? '4px solid #60a5fa' : 'none',
                backgroundColor: isEditing
                  ? 'rgba(59,130,246,.05)'
                  : 'transparent',
              }}
            >
              <img
                src={p.image_url}
                alt={p.name}
                style={{
                  width: 60,
                  height: 60,
                  objectFit: 'cover',
                  borderRadius: 10,
                  background: '#1e293b',
                  border: '1px solid #334155',
                }}
              />
              <div style={{ flex: 1 }}>
                <div style={{ fontWeight: 600 }}>{p.name}</div>
                <div style={{ color: '#94a3b8', fontSize: 14 }}>
                  {categories.find((c) => c.id === p.categoryId)?.name || '‚Äî'}
                </div>
                {p.attributes && p.attributes.length > 0 && (
                  <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 4 }}>
                    <span style={{ color: '#60a5fa' }}>–ê—Ç—Ä–∏–±—É—Ç—ã:</span>{' '}
                    {p.attributes.map((attr, idx) => (
                      <span key={attr.attribute_id}>
                        {attr.name}: {attr.value}{attr.unit ? ` ${attr.unit}` : ''}
                        {idx < p.attributes.length - 1 ? ', ' : ''}
                      </span>
                    ))}
                  </div>
                )}
                {p.services && p.services.length > 0 && (
                  <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 2 }}>
                    <span style={{ color: '#60a5fa' }}>–°–µ—Ä–≤–∏—Å—ã:</span>{' '}
                    {p.services.map((service, idx) => (
                      <span key={service.id}>
                        {service.name} ({service.price} ‚ÇΩ)
                        {idx < p.services.length - 1 ? ', ' : ''}
                      </span>
                    ))}
                  </div>
                )}
              </div>
              <div style={{ fontWeight: 700, color: '#38bdf8' }}>
                {p.price} ‚ÇΩ
              </div>
              <button
                onClick={() => {
                  const categoryId = p.categoryId ?? p.category_id;
                  const category = categories.find(c => c.id === categoryId);
                  
                  // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  if (category) {
                    const element = categories.find(c => c.id === category.parent_id);
                    if (element) {
                      const room = categories.find(c => c.id === element.parent_id);
                      
                      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                      if (room) setRoomId(room.id.toString());
                      setElementId(element.id.toString());
                      setSubId(category.id.toString());
                    }
                  }
                  
                  setForm({
  name: p.name,
  price: p.price,
  description: p.description ?? '',
  image_url: p.image_url ?? '',
  categoryId: categoryId,
  attributes: stringifyAttributes(p.attributes),   // –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–∫–æ–π
  services: (p.services || []).map((s) => String(s.id)), // <-- –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
});

                  setEditingId(id);
                }}
                style={editBtnStyle}
              >
                ‚úé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button
                onClick={() => removeProduct(p)}
                style={deleteButtonStyle}
              >
                üóë –£–¥–∞–ª–∏—Ç—å
              </button>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

export default ProductManager;
